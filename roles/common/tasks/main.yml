---
- name: Set OS distribution dependent variables
  include_vars: "os_{{ ansible_facts['distribution'] }}.yml"

- name: Set the hostname
  hostname:
    name: "{{ hostname }}"
  when: hostname is defined

- name: Set locale
  ansible.builtin.lineinfile:
    path: /etc/locale.gen
    regexp: '^en_US.UTF-8 '
    line: en_US.UTF-8 UTF-8
  notify:
    - generate_locales

- name: Set LANG variable
  ansible.builtin.lineinfile:
    path: /etc/locale.conf
    regexp: '^LANG='
    line: LANG=en_US.UTF-8

- name: Set timezone 
  become: true
  ansible.builtin.file:
    src: /usr/share/zoneinfo/{{ local_timezone }}
    dest: /etc/localtime
    state: link
    force: true

- name: Set system clock 
  ansible.builtin.command: hwclock --systohc --utc
  become: true

- name: Add hosts
  ansible.builtin.blockinfile:
    path: /etc/hosts
    block: | 
      127.0.0.1  localhost
      127.0.1.1  {{ hostname }}
      ::1        localhost ip6-localhost ip6-loopback
      ff02::1    ip6-allnodes
      ff02::2    ip6-allrouters
      192.168.40.1  router.q.qw  router
      192.168.40.2  office.q.qw  office
      192.168.40.4  mythbox.q.qw  mythbox
      192.168.40.5  taichi.q.qw  taichi
    insertafter: 'EOF'
    mode: '0644'
    backup: true

# - name: Set kernel parameters
#   lineinfile:
#     dest: /etc/default/grub
#     regexp: '^GRUB_CMDLINE_LINUX_DEFAULT'
#     state: present
#     line: 'GRUB_CMDLINE_LINUX_DEFAULT="{{ kernel_parameters }}"'
#   when: kernel_parameters is defined and bootloader == 'grub'
#   notify:
#     - rebuild grub
#   tags:
#     - kernelparams

- name: Enable pacman color
  ansible.builtin.lineinfile:
    path: /etc/pacman.conf
    regexp: '^Color'
    line: Color
    insertafter: '^\[options\]'
    backup: true
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Enable pacman parallel downloads
  ansible.builtin.lineinfile:
    path: /etc/pacman.conf
    regexp: '^ParallelDownloads'
    line: ParallelDownloads = 5
    insertafter: '^\[options\]'
    backup: true
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Enable pacman multilib
  ansible.builtin.blockinfile:
    path: /etc/pacman.conf
    block: | 
      [multilib]
      Include = /etc/pacman.d/mirrorlist
    insertafter: 'EOF'
    backup: true
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Create pacman hook directory
  file: path=/etc/pacman.d/hooks
        state=directory
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Install reflector
  community.general.pacman:
    update_cache: true
    name: reflector 
    state: present
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Find fastest Ubuntu mirror
  ansible.builtin.shell: curl -s http://mirrors.ubuntu.com/mirrors.txt | xargs -I {} sh -c 'echo $(curl -r 0-1024000 -s -w %{speed_download} -o /dev/null {}/ls-lR.gz) {}' | sort -g -r | head -1 | awk '{ print $2  }'
  register: fastest_mirror
  ignore_errors: true
  when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]

- name: Update mirror list (Arch)
  ansible.builtin.command: reflector --country US,Canada --completion-percent 90 --sort rate --latest 20 --protocol https --save /etc/pacman.d/mirrorlist
  become: true
  when: ansible_facts['distribution'] == "Archlinux"

- name: Enable local package mirror
  ansible.builtin.lineinfile:
    path: /etc/pacman.d/mirrorlist
    line: Server = {{ pacman_mirror }}
    insertbefore: 'BOF'
    backup: true
  tags:
    - packages
  when: pacman_mirror is defined and ansible_facts['distribution'] == "Archlinux"

- name: Switch to fastest Ubuntu mirror
  ansible.builtin.replace:
    path: /etc/apt/sources.list
    regexp: deb http://us.archive.ubuntu.com/ubuntu
    replace: deb {{ fastest_mirror }}
    backup: true
  when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]

- name: Update package cache and upgrade (Arch)
  community.general.pacman:
    update_cache: true
    upgrade: true
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Update package cache and upgrade (Debian)
  ansible.builtin.apt: 
    update_cache: yes
    cache_valid_time: 3600  # Only run "update_cache=yes" if the last one is more than 3600 seconds ago
    name: "*"
    state: latest
    autoclean: yes
    autoremove: yes
  tags:
    - packages
  when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]
  
- name: Install distro base packages
  ansible.builtin.package:
    name: "{{ distro_packages }}" 
    state: present
    update_cache: true
  tags:
    - packages

- name: Install base packages
  ansible.builtin.package:
    name: "{{ base_packages }}"
    state: present
    update_cache: true
  tags:
    - packages

- name: Quiet pam_systemd_home.so warnings
  ansible.builtin.copy:
    src: system-auth
    dest: /etc/pam.d/system-auth
    backup: true
  when: ansible_facts['distribution'] == "Archlinux"

- name: Install user setup script
  ansible.builtin.copy:
    src: user-setup.sh
    dest: /usr/local/sbin/
    mode: '0755'

- include_tasks: shell2xdg.yml
- include_tasks: shell.yml
- include_tasks: user.yml
- include_tasks: pacman-aur.yml
  when: ansible_facts['distribution'] == "Archlinux"
- include_tasks: printer.yml
