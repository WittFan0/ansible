---
- name: Set OS distribution dependent variables
  ansible.builtin.include_vars: "os_{{ ansible_facts['distribution'] }}.yml"

- name: Set the hostname
  ansible.builtin.hostname:
    name: "{{ hostname }}"
    use: systemd
  when: hostname is defined

- name: Generate locales
  ansible.builtin.command: locale-gen en_US en_US.UTF-8
  when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]

- name: Set locale
  ansible.builtin.lineinfile:
    path: /etc/locale.gen
    regexp: '^en_US.UTF-8 '
    line: en_US.UTF-8 UTF-8
  when: ansible_facts['distribution'] == "Archlinux"

- name: Set LANG variable
  ansible.builtin.lineinfile:
    path: /etc/locale.conf
    regexp: '^LANG='
    line: LANG=en_US.UTF-8
  when: ansible_facts['distribution'] == "Archlinux"

- name: Make users aware that systems are monitored
  ansible.builtin.copy:
    src: issue
    dest: /etc/issue
    mode: '0644'
    backup: true

- name: Disable uncommon network protocols
  ansible.builtin.copy:
    src: uncommon_net_protocols.conf
    dest: /etc/modprobe.d/uncommon_net_protocols.conf
    owner: root
    group: root
    mode: '0644'
    backup: true

- name: Disable core dumps using sysctl
  ansible.builtin.copy:
    content: "kernel.core_pattern=|/bin/false\n"
    dest: /etc/sysctl.d/50-coredump.conf
    owner: root
    group: root
    mode: '0644'
    backup: true

- name: Create a directory for custom systemd coredump configs
  ansible.builtin.file:
    path: /etc/systemd/coredump.conf.d/
    state: directory
    owner: root
    group: root
    mode: '0750'

- name: Disable core dumps using systemd
  ansible.builtin.copy:
    content: |
      [Coredump]
      Storage=none
      ProcessSizeMax=0
    dest: /etc/systemd/coredump.conf.d/custom.conf
    owner: root
    group: root
    mode: '0640'
    backup: true

- name: Create a directory to set resource limits for users logged in via PAM
  ansible.builtin.file:
    path: /etc/security/limits.d/
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Disable core dumps for users logged in via PAM
  ansible.builtin.copy:
    content: |
      *           soft    core       0           # Prevent corefiles from being generated by default.
    dest: /etc/security/limits.d/50-coredumps.conf
    owner: root
    group: root
    mode: '0640'
    backup: true

- name: Disallow PAM users except root from having processes of minimal niceness
  ansible.builtin.copy:
    content: |
      *           hard    nice       -19         # Prevent non-root users from running a process at minimal niceness.
      root        hard    nice       -20         # Allows root to run a process at minimal niceness to fix the system when unresponsive.
    dest: /etc/security/limits.d/50-niceness.conf
    owner: root
    group: root
    mode: '0640'
    backup: true

- name: Limit the number of processes for users logged in via PAM
  ansible.builtin.copy:
    content: |
      *           hard    nproc      2048        # Prevent fork-bombs from taking out the system.
      root        hard    nproc      65536       # Prevent root from not being able to launch enough processes
    dest: /etc/security/limits.d/50-nproc.conf
    owner: root
    group: root
    mode: '0644'
    backup: true

# geerlingguy.ntp will overwrite timezone
- name: Set timezone to {{ timezone }}
  community.general.timezone:
    name: "{{ timezone }}"

# - name: Set timezone
#   become: true
#   ansible.builtin.file:
#     src: /usr/share/zoneinfo/{{ timezone }}
#     dest: /etc/localtime
#     state: link
#     force: true

# - name: Set system clock
#   ansible.builtin.command: hwclock --systohc --utc
#   become: true

- name: Don't load microcode, it is already in initramfs
  ansible.builtin.lineinfile:
    dest: /etc/default/grub
    regexp: '^GRUB_EARLY_INITRD_LINUX_STOCK'
    line: GRUB_EARLY_INITRD_LINUX_STOCK=''
    state: present
  # when: bootloader == 'grub'
  notify:
    - Rebuild grub

- name: Set bootloader resolution
  ansible.builtin.lineinfile:
    dest: /etc/default/grub
    regexp: '^GRUB_GFXMODE'
    line: 'GRUB_GFXMODE="{{ grub_gfxmode }}"'
    state: present
  when: grub_gfxmode is defined # and bootloader == 'grub'
  notify:
    - Rebuild grub

- name: Allow the kernel use the same resolution used by grub
  ansible.builtin.lineinfile:
    dest: /etc/default/grub
    regexp: '^GRUB_GFXPAYLOAD_LINUX'
    line: GRUB_GFXPAYLOAD_LINUX=keep
    state: present
  # when: bootloader == 'grub'
  notify:
    - Rebuild grub

- name: Set kernel parameters
  ansible.builtin.lineinfile:
    dest: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT'
    state: present
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="{{ kernel_parameters }}"'
  when: kernel_parameters is defined # and bootloader == 'grub'
  notify:
    - Rebuild grub
  tags:
    - kernelparams

- name: Quiet pam_systemd_home.so warnings
  ansible.builtin.copy:
    src: system-auth
    dest: /etc/pam.d/system-auth
    mode: '0644'
    backup: true
  when: ansible_facts['distribution'] == "Archlinux"

- name: Provide systemd-resolved domain name resolution for software that reads /etc/resolv.conf directly
  ansible.builtin.file:
    src: /run/systemd/resolve/stub-resolv.conf
    dest: /etc/resolv.conf
    state: link
    force: true

- name: Install user setup script
  ansible.builtin.copy:
    src: user-setup.sh
    dest: /usr/local/sbin/
    mode: '0755'

- name: Push pacman cache cleanup service
  ansible.builtin.copy:
    src: paccache.service
    dest: /etc/systemd/system/paccache.service
    mode: '0644'
    backup: true
  notify:
    - Reload systemd config
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Push pacman cache cleanup timer
  ansible.builtin.copy:
    src: paccache.timer
    dest: /etc/systemd/system/paccache.timer
    mode: '0644'
    backup: true
  notify:
    - Reload systemd config
    - restart_paccache
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Enable and start pacman cache cleanup timer
  ansible.builtin.service:
    name: paccache.timer
    enabled: true
    state: started
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Invoke lanmounts playbook
  ansible.builtin.include_tasks: lanmounts.yml

# - ansible.builtin.include_tasks: discovery.yml  # <-- incomplete

- name: Invoke shell2xdg playbook
  ansible.builtin.include_tasks: shell2xdg.yml
  when: remote_user.shell is defined

- name: Invoke user_skel playbook
  ansible.builtin.include_tasks: user_skel.yml
