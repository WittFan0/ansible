- name: Set OS distribution dependent variables
  include_vars: "os_{{ ansible_facts['distribution'] }}.yml"

- name: Push pacman cache cleanup service
  copy: src=paccache.service dest=/etc/systemd/system/paccache.service backup=true
  notify:
    - reload_systemd_config
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Push pacman cache cleanup timer
  copy: src=paccache.timer dest=/etc/systemd/system/paccache.timer backup=true
  notify:
    - reload_systemd_config
    - restart_paccache
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Enable and start pacman cache cleanup timer
  service: name=paccache.timer enabled=yes state=started
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Install compiling tools
  ansible.builtin.package:
    name:
      - base-devel
      - pigz
      - pbzip2
    state: present
  when: ansible_facts['distribution'] == "Archlinux"

- name: Ensure wheel group exists
  ansible.builtin.group:
    name: wheel
    state: present
  tags:
    - aur
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Create the `aur_builder` user
  become: yes
  ansible.builtin.user:
    name: "{{ aur.builder }}"
    create_home: yes
    uid: 1110
    group: wheel
  tags:
    - aur
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Allow the `aur_builder` user to run `sudo pacman` without a password
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/11-install-aur_builder
    line: "{{ aur.builder }} ALL=(ALL) NOPASSWD: /usr/bin/pacman"
    create: yes
    validate: 'visudo -cf %s'
  tags:
    - aur
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Use all cores when compiling software
  ansible.builtin.lineinfile:
    dest: /etc/makepkg.conf
    regexp: "^MAKEFLAGS="
    line: MAKEFLAGS="-j$(nproc)"
    backup: true

- name: Use all cores when compressing packages (gzip)
  ansible.builtin.lineinfile:
    dest: /etc/makepkg.conf
    regexp: "^COMPRESSGZ="
    line: "COMPRESSGZ=(pigz -c -f -n)"
    backup: true

- name: Use all cores when compressing packages (bzip2)
  ansible.builtin.lineinfile:
    dest: /etc/makepkg.conf
    regexp: "^COMPRESSBZ2="
    line: "COMPRESSBZ2=(pbzip2 -c -f)"
    backup: true

- name: Use all cores when compressing packages (xz)
  ansible.builtin.lineinfile:
    dest: /etc/makepkg.conf
    regexp: "^COMPRESSXZ="
    line: "COMPRESSXZ=(xz -c -z --threads=0 -)"
    backup: true

- name: Use all cores when compressing packages (zstd)
  ansible.builtin.lineinfile:
    dest: /etc/makepkg.conf
    regexp: "^COMPRESSZST="
    line: "COMPRESSZST=(zstd -c -z -q --threads=0 -)"
    backup: true

- name: Create AUR directory
  file: path=/home/{{ aur.builder }}/{{ aur.dir }}
        state=directory
        owner="{{ aur.builder }}"
        group="wheel"
  tags:
    - aur
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Configure software packaging
  ansible.builtin.template:
    src: makepkg_conf.j2
    dest: /home/{{ aur.builder }}/.config/pacman/makepkg.conf
    backup: true

- name: Install yay
  kewlfft.aur.aur:
    name: 
      - yay
    state: present
    update_cache: "yes"
  tags:
    - aur
    - packages
  become: "yes"
  become_user: "{{ aur.builder }}"
  when: ansible_facts['distribution'] == "Archlinux"

