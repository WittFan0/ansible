---
- name: Create XDG-compliant skeleton dirs for {{ remote_user.shell }}
  ansible.builtin.file:
    path: /etc/skel/.config/{{ remote_user.shell }}/
    state: directory
    mode: '0755'
  when: remote_user.shell is defined
  tags:
    - shell

- name: Create XDG-compliant skeleton files for {{ remote_user.shell }}_profile
  ansible.builtin.command: /usr/bin/mv /etc/skel/.{{ remote_user.shell }}_profile /etc/skel/.config/{{ remote_user.shell }}/profile
  args:
    creates: /etc/skel/.config/{{ remote_user.shell }}/profile
    removes: /etc/skel/.{{ remote_user.shell }}_profile
  become: true
  when: remote_user.shell is defined
  tags:
    - shell

- name: Create XDG-compliant skeleton files for {{ remote_user.shell }}rc
  ansible.builtin.command: /usr/bin/mv /etc/skel/.{{ remote_user.shell }}rc /etc/skel/.config/{{ remote_user.shell }}/{{ remote_user.shell }}rc
  args:
    creates: /etc/skel/.config/{{ remote_user.shell }}/{{ remote_user.shell }}rc
    removes: /etc/skel/.{{ remote_user.shell }}rc
  when: remote_user.shell is defined
  become: true
  tags:
    - shell

- name: Create global XDG-compliant BASH login shell
  ansible.builtin.copy:
    src: bashprofile_xdg
    dest: /etc/profile.d/bash_xdg.sh
    backup: false
    mode: '0644'
  tags:
    - shell

# - name: Create local XDG-compliant BASH login shell
#   ansible.builtin.copy:
#     src: bashprofile_xdg
#     dest: /etc/skel/.bash_profile
#     backup: false
#     mode: '0644'
#   tags:
#     - shell
#   notify:

- name: Create global XDG-compliant BASH interactive shell
  ansible.builtin.blockinfile:
    path: /etc/bash.bashrc
    block: |
      _confdir=${XDG_CONFIG_HOME:-$HOME/.config}/bash
      _datadir=${XDG_DATA_HOME:-$HOME/.local/share}/bash

      [[ -r "$_confdir/bashrc" ]] && . "$_confdir/bashrc"
      [[ -r "$_confdir/aliases" ]] && . "$_confdir/aliases"

      [[ ! -d "$_datadir" ]] && mkdir -p "$_datadir"
      HISTFILE=$_datadir/history
      HISTSIZE=50000
      HISTCONTROL="ignoredups"
      HISTIGNORE="exit:htop:reboot:sudo reboot:poweroff:sudo poweroff"

      unset _confdir
      unset _datadir

      # bind the up and down arrow keys to search through Bash's history
      bind '"\e[A": history-search-backward'
      bind '"\e[B": history-search-forward'

      GPG_TTY=$(tty)
      export GPG_TTY
    insertafter: 'EOF'
    mode: '0644'
    append_newline: true
    prepend_newline: true
    backup: true
  when: remote_user.shell  == "bash"
  tags:
    - shell

# - name: Create local XDG-compliant BASH interactive shell
#   ansible.builtin.copy:
#     src: bashrc_xdg
#     dest: /etc/skel/.{{ remote_user.shell }}rc
#     backup: false
#     mode: '0644'
#   tags:
#     - shell
#   notify:

- name: Set global environment variables
  ansible.builtin.blockinfile:
    path: /etc/security/pam_env.conf
    block: |
      XDG_CONFIG_DIRS DEFAULT=/etc/xdg
      XDG_DATA_DIRS   DEFAULT=/usr/local/share:/usr/share
      XDG_CONFIG_HOME DEFAULT=@{HOME}/.config
      XDG_CACHE_HOME  DEFAULT=@{HOME}/.cache
      XDG_DATA_HOME   DEFAULT=@{HOME}/.local/share
      XDG_STATE_HOME  DEFAULT=@{HOME}/.local/state
      DIFFPROG        DEFAULT=meld
      EDITOR          DEFAULT=nano
      SUDO_EDITOR     DEFAULT=nano
      VISUAL          DEFAULT=nano
      HISTCONTROL     DEFAULT=ignoreboth

      # Settings required by nvidia-vaapi-driver
      __EGL_VENDOR_LIBRARY_FILENAMES=/usr/share/glvnd/egl_vendor.d/10_nvidia.json
      LIBVA_DRIVER_NAME=nvidia
      MOZ_ENABLE_WAYLAND=1
      NVD_BACKEND=direct
      MOZ_DISABLE_RDD_SANDBOX=1
    insertafter: 'EOF'
    mode: '0644'
    append_newline: true
    prepend_newline: true
    backup: true
  tags:
    - shell
#   notify:

- name: Install Bash
  ansible.builtin.package:
    name:
      - bash
      - bash-completion
    state: present
  tags:
    - shell
  when: remote_user.shell == "bash"

- name: Install ZSH
  ansible.builtin.package:
    name: "{{ common_zsh_packages }}"
    state: present
  tags:
    - shell
  when: remote_user.shell == "zsh"
