---
- name: Set OS distribution dependent variables
  include_vars: "os_{{ ansible_facts['distribution'] }}.yml"

- name: Install sound system
  ansible.builtin.package:
    name:
      - wireplumber
      - pipewire-pulse
      - pipewire-jack
      # - lib32-pipewire-jack
    state: present
  environment: "{{proxy_env}}"

- name: Install XFCE desktop environment
  ansible.builtin.include_tasks: xfce.yml
  when: desktop_environment == "xfce"

- name: Install KDE desktop environment
  ansible.builtin.include_tasks: kde.yml
  when: desktop_environment == "kde"

- name: Install Gnome desktop environment
  ansible.builtin.include_tasks: gnome.yml
  when: desktop_environment == "gnome"

- name: Install Sway desktop environment
  ansible.builtin.include_tasks: sway.yml
  when: desktop_environment == "sway"

- name: Install virtio video packages
  ansible.builtin.package:
    name: "{{ virtio_video_packages }}"
    state: present
  tags:
    - packages
  when: ansible_facts['virtualization_role'] == "guest"
  environment: "{{proxy_env}}"

- name: Install nvidia video packages
  ansible.builtin.package:
    name: "{{ nvidia_video_packages }}"
    state: present
  tags:
    - packages
  when: ansible_facts['virtualization_role'] != "guest"
  environment: "{{proxy_env}}"

- name: Remove kms from initial ramdisk (Arch) - Nvidia requirement
  ansible.builtin.copy:
    dest: /etc/mkinitcpio.conf.d/nvidia.conf
    content: HOOKS=(base udev autodetect modconf keyboard keymap block filesystems fsck grub-btrfs-overlayfs)
    owner: root
    group: root
    mode: '0644'
    backup: true
  notify:  # <-- Handlers are executed in the order they are defined in the handlers section, not in the order listed in the notify statement.
    - reboot_system
    - recreate_initial_ramdisk
  when: ansible_facts['distribution'] == "Archlinux" && ansible_facts['virtualization_role'] != "guest"

- name: Rebuild initial ramdisk if necessary and reboot
  ansible.builtin.meta: flush_handlers

- name: Enable Lightdm display manager
  service:
    name: lightdm.service
    enabled: yes
    state: started
  when: desktop_environment == "xfce"

- name: Enable SDDM display manager
  service:
    name: sddm.service
    enabled: yes
    state: started
  when: desktop_environment == "kde"

- name: Enable Gnome display manager
  service:
    name: gdm.service
    enabled: yes
    state: started
  when: desktop_environment == "gnome"

