---
- name: Set OS distribution dependent variables
  include_vars: "os_{{ ansible_facts['distribution'] }}.yml"

- name: Set desktop environment dependent variables
  include_vars: "os_{{ desktop_environment }}.yml"

- name: Install sound system
  ansible.builtin.package:
    name:
      - wireplumber
      - pipewire-pulse
      - pipewire-jack
      # - lib32-pipewire-jack
    state: present
  environment: "{{proxy_env}}"

- name: Create wallpaper directory if it doesn't exist
  ansible.builtin.file:
    path: "{{ wallpaper-dir }}"
    state: directory
    mode: '0755'

- name: Add wallpapers
  ansible.builtin.copy:
    src: wallpaper/
    dest: "{{ wallpaper-dir }}"
    backup: false

# - name: Clone Dracula wallpapers from github
#   ansible.builtin.git:
#     repo: 'https://github.com/dracula/wallpaper.git'
#     dest: "{{ wallpaper-dir }}"

- name: Unarchive Dracula wallpapers into {{ wallpaper-dir }}
  ansible.builtin.unarchive:
    src: dracula-wallpaper.zip
    dest: "{{ wallpaper-dir }}"

- name: Install {{ desktop_environment }} desktop environment
  ansible.builtin.include_tasks: "{{ desktop_environment }}.yml"
  when: desktop_environment is defined

# - name: Install XFCE desktop environment
#   ansible.builtin.include_tasks: xfce.yml
#   when: desktop_environment == "xfce"

# - name: Install KDE desktop environment
#   ansible.builtin.include_tasks: kde.yml
#   when: desktop_environment == "kde"

# - name: Install Gnome desktop environment
#   ansible.builtin.include_tasks: gnome.yml
#   when: desktop_environment == "gnome"

# - name: Install Sway desktop environment
#   ansible.builtin.include_tasks: sway.yml
#   when: desktop_environment == "sway"

- name: Install virtio video packages
  ansible.builtin.package:
    name: "{{ virtio_video_packages }}"
    state: present
  tags:
    - packages
  when: ansible_facts['virtualization_role'] == "guest"
  environment: "{{proxy_env}}"

- name: Install nvidia video packages
  ansible.builtin.package:
    name: "{{ nvidia_video_packages }}"
    state: present
  tags:
    - packages
  when: ansible_facts['virtualization_role'] != "guest"
  environment: "{{proxy_env}}"

- name: Enable Nvidia hardware video acceleration (Arch)
  kewlfft.aur.aur:
    name: libva-nvidia-driver
    state: present
  tags:
    - aur
    - packages
  become: true
  become_user: "{{ aur.builder }}"
  when: ansible_facts['distribution'] == "Archlinux" and ansible_facts['virtualization_role'] != "guest"
  environment: "{{proxy_env}}"

- name: Remove kms (nvidia requirement) and add plymouth to initial ramdisk (Arch) 
  ansible.builtin.copy:
    dest: /etc/mkinitcpio.conf.d/nvidia.conf
    content: HOOKS=(base udev autodetect modconf keyboard keymap block filesystems fsck grub-btrfs-overlayfs plymouth)
    owner: root
    group: root
    mode: '0644'
    backup: true
  notify:  # <-- Handlers are executed in the order they are defined in the handlers section, not in the order listed in the notify statement.
    - reboot_system
    - recreate_initial_ramdisk
  when: ansible_facts['distribution'] == "Archlinux" and ansible_facts['virtualization_role'] != "guest"

- name: Create a configuration directory for display manager service
  ansible.builtin.file:
    path: /etc/systemd/system/display-manager.service.d/
    state: directory
    mode: '0755'
  when: desktop_environment != "gnome"

- name: Configure nearly smooth plymouth transition
  ansible.builtin.copy:
    src: plymouth.conf
    dest: /etc/systemd/system/display-manager.service.d/plymouth.conf
    backup: true
  when: desktop_environment != "gnome"

- name: Rebuild initial ramdisk if necessary and reboot
  ansible.builtin.meta: flush_handlers

- name: Enable {{ display-mgr }} display manager
  service:
    name: "{{ display-mgr }}.service"
    enabled: yes
    state: started

# - name: Enable LightDM display manager
#   service:
#     name: lightdm.service
#     enabled: yes
#     state: started
#   when: desktop_environment == "xfce"

# - name: Enable SDDM display manager
#   service:
#     name: sddm.service
#     enabled: yes
#     state: started
#   when: desktop_environment == "kde"

# - name: Enable Gnome display manager
#   service:
#     name: gdm.service
#     enabled: yes
#     state: started
#   when: desktop_environment == "gnome"

