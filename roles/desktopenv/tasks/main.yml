---
  # This play executes in the directory it is called from. Since this play is included by other plays,
  # all file references in this play must redirect to the desktopenv path.

- name: Set OS distribution dependent variables
  ansible.builtin.include_vars: "../../desktopenv/vars/os_{{ ansible_facts['distribution'] }}.yml"

- name: Set desktop environment dependent variables
  ansible.builtin.include_vars: "../../desktopenv/vars/de_{{ desktop_environment }}.yml"

- name: Install sound system
  ansible.builtin.package:
    name:
      - wireplumber
      - pipewire-pulse
      # - pipewire-jack  # <-- not available until 23.04
      # - lib32-pipewire-jack
    state: present
  environment: "{{ proxy_env }}"

- name: Install pipewire-jack
  ansible.builtin.package:
    name:
      - pipewire-jack  # <-- not available until 23.04
      - lib32-pipewire-jack
    state: present
  environment: "{{ proxy_env }}"
  when: ansible_facts['distribution'] == "Archlinux"

- name: Create Dracula wallpaper directory if it doesn't exist
  ansible.builtin.file:
    path: "{{ desktopenv_wallpaper_dir }}/Dracula"
    state: directory
    mode: '0755'

# - name: Clone Dracula wallpapers from github
#   ansible.builtin.git:
#     repo: 'https://github.com/dracula/wallpaper.git'
#     dest: "{{ desktopenv_wallpaper_dir }}"

- name: Unarchive Dracula wallpapers
  ansible.builtin.unarchive:
    src: ../../desktopenv/files/dracula-wallpaper.zip
    dest: "{{ desktopenv_wallpaper_dir }}/Dracula/"

- name: Install {{ desktop_environment }}
  ansible.builtin.include_tasks: "../../desktopenv/tasks/{{ desktop_environment }}.yml"
  when: desktop_environment is defined

# - name: Install XFCE desktop environment
#   ansible.builtin.include_tasks: xfce.yml
#   when: desktop_environment == "xfce"

# - name: Install KDE desktop environment
#   ansible.builtin.include_tasks: kde.yml
#   when: desktop_environment == "kde"

# - name: Install Gnome desktop environment
#   ansible.builtin.include_tasks: gnome.yml
#   when: desktop_environment == "gnome"

# - name: Install Sway desktop environment
#   ansible.builtin.include_tasks: sway.yml
#   when: desktop_environment == "sway"

- name: Install virtio video packages
  ansible.builtin.package:
    name: "{{ desktopenv_virtio_video_packages }}"
    state: present
  tags:
    - packages
  when: ansible_facts['virtualization_role'] == "guest"
  environment: "{{ proxy_env }}"

- name: Install nvidia video packages
  ansible.builtin.package:
    name: "{{ desktopenv_nvidia_video_packages }}"
    state: present
  tags:
    - packages
  when: ansible_facts['virtualization_role'] != "guest"
  environment: "{{ proxy_env }}"

- name: Setup a user to build AUR packages
  ansible.builtin.include_tasks: ../../common/tasks/aur.yml
  when: ansible_facts['distribution'] == "Archlinux" and aur_ran is not defined

- name: Enable Nvidia hardware video acceleration (Arch)
  kewlfft.aur.aur:
    name: libva-nvidia-driver
    state: present
  tags:
    - aur
    - packages
  become: true
  become_user: "{{ aur.builder }}"
  when: ansible_facts['distribution'] == "Archlinux" and ansible_facts['virtualization_role'] != "guest"
  environment: "{{ proxy_env }}"

- name: Remove kms (nvidia requirement) and add plymouth to initial ramdisk (Arch)
  ansible.builtin.copy:
    dest: /etc/mkinitcpio.conf.d/nvidia.conf
    content: |
      MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)
      HOOKS=(base udev autodetect microcode modconf keyboard keymap block filesystems fsck grub-btrfs-overlayfs plymouth)
    owner: root
    group: root
    mode: '0644'
    backup: true
  notify:  # <-- Handlers are executed in the order they are defined in the handlers section, not in the order listed in the notify statement.
    - Recreate initial ramdisk
  when: ansible_facts['distribution'] == "Archlinux" and ansible_facts['virtualization_role'] != "guest"

- name: Create a configuration directory for display manager service
  ansible.builtin.file:
    path: /etc/systemd/system/display-manager.service.d/
    state: directory
    mode: '0755'
  when: desktop_environment != "gnome"

- name: Configure nearly smooth plymouth transition
  ansible.builtin.copy:
    src: ../../desktopenv/files/plymouth.conf
    dest: /etc/systemd/system/display-manager.service.d/plymouth.conf
    owner: root
    mode: '0644'
    backup: true
  when: desktop_environment != "gnome"

- name: Rebuild initial ramdisk if necessary and reboot
  ansible.builtin.meta: flush_handlers

- name: Enable {{ desktopenv_display_mgr }}
  ansible.builtin.service:
    name: "{{ desktopenv_display_mgr }}.service"
    enabled: true
    state: started

# - name: Enable LightDM display manager
#   ansible.builtin.service:
#     name: lightdm.service
#     enabled: yes
#     state: started
#   when: desktop_environment == "xfce"

# - name: Enable SDDM display manager
#   ansible.builtin.service:
#     name: sddm.service
#     enabled: yes
#     state: started
#   when: desktop_environment == "kde"

# - name: Enable Gnome display manager
#   ansible.builtin.service:
#     name: gdm.service
#     enabled: yes
#     state: started
#   when: desktop_environment == "gnome"

- name: Install smartcard packages
  ansible.builtin.package:
    name:
      - pcsc-tools
    state: present
  tags:
    - packages

- name: Install smartcard service (Debian)
  ansible.builtin.apt:
    name: pcscd
    state: present
  tags:
    - packages
  when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]

- name: Install smartcard (AUR)
  kewlfft.aur.aur:
    name:
      - coolkey
    state: present
    update_cache: "yes"
  tags:
    - aur
    - packages
  become: true
  become_user: "{{ aur.builder }}"
  when: ansible_facts['distribution'] == "Archlinux"

- name: Unpack DoD root certificates into /opt
  ansible.builtin.unarchive:
    src: ../../desktopenv/files/unclass-certificates_pkcs7_DoD.zip
    dest: /opt/

- name: Enable and start smartcard service
  ansible.builtin.service:
    name: pcscd.service
    enabled: true
    state: started

# Firejail installs A LOT of dependencies. Is it worth it?
# - name: Install firejail
#   ansible.builtin.package:
#     name:
#       - firejail
#     state: present
#   tags:
#     - packages

# PROBABLY NEED TO TEST THIS (e.g. SUBVOLUMES, DOCKER, ETC.) BEFORE ENABLING EVERYTHING.
# - name: Activate firejail
#   ansible.builtin.command: |
#     firecfg
#   become: true

- name: Mark that a desktop has already been installed
  ansible.builtin.set_fact:
    desktop_exists: true
