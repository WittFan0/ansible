---
- name: Provide systemd-resolved domain name resolution for software that reads /etc/resolv.conf directly 
  ansible.builtin.file:
    src: /run/systemd/resolve/stub-resolv.conf
    dest: /etc/resolv.conf
    state: link
    force: true

- name: Create hosts file for DNS server
  ansible.builtin.template:
    src: hosts_dnsmasq.j2
    dest: /etc/hosts.dnsmasq
    mode: '0644'
    backup: yes

- name: Download DNS blacklist
  ansible.builtin.get_url:
    url: https://github.com/notracking/hosts-blocklists/raw/master/dnsmasq/dnsmasq.blacklist.txt
    dest: /etc/dnsmasq.blacklist.txt
    mode: '0644'
    backup: no

- name: Create dnsmasq config directory if it does not exist
  ansible.builtin.file:
    path: /etc/dnsmasq.d
    state: directory
    mode: '0755'

- name: Add DNS blacklist to DNS server
  ansible.builtin.copy:
    content: conf-file=/etc/dnsmasq.blacklist.txt
    dest: /etc/dnsmasq.d/10-dnsblacklist.conf
    mode: '0644'
    backup: no

# # Blackilst is no longer being maintained
# # TODO: Find a DNS blacklist replacement
# - name: Add cron job for refreshing DNS blacklist
#   ansible.builtin.copy:
#     src: dns-blacklist-update
#     dest: /etc/cron.daily/dns-blacklist-update
#     mode: '0755'
#     backup: no

- name: Create PXE directory if it does not exist
  ansible.builtin.file:
    path: /srv/tftp/pxe
    state: directory
    mode: '0755'

- name: Download boot file for BIOS netbooting
  ansible.builtin.get_url:
    url: http://boot.ipxe.org/undionly.kpxe
    dest: /srv/tftp/pxe/undionly.kpxe
    mode: '0644'
    backup: no

- name: Download boot file for UEFI netbooting
  ansible.builtin.get_url:
    url: http://boot.ipxe.org/ipxe.efi
    dest: /srv/tftp/pxe/ipxe.efi
    mode: '0644'
    backup: no

- name: Create netboot menu
  ansible.builtin.copy:
    src: bootmenu.ipxe
    dest: /srv/tftp/pxe/bootmenu.ipxe
    mode: '0644'
    backup: yes

- name: Configure netboot
  ansible.builtin.copy:
    src: 10-netboot.conf
    dest: /etc/dnsmasq.d/10-netboot.conf
    mode: '0644'
    backup: yes

- name: Configure DNS and DHCP servers
  ansible.builtin.template:
    src: 10-router_conf.j2
    dest: /etc/dnsmasq.d/10-router.conf
    mode: '0644'
    backup: yes

- name: Add DNS setting for Plex
  ansible.builtin.copy:
    content: rebind-domain-ok=/plex.direct/
    dest: /etc/dnsmasq.d/10-plex.conf
    mode: '0644'
    backup: no

- name: Install firewall and DNS, DHCP and TFTP servers
  ansible.builtin.package:
    name: ["dnsmasq", "ufw"]
    state: present
  tags:
    - packages

- name: Accept DNS requests from {{ lan.subnet }}
  community.general.ufw:
    rule: allow
    from_ip: "{{ lan.subnet }}"
    to_port: domain
    to_ip: "{{ lan0.ip}}"
    comment: DNS
  become: true

- name: Accept DHCP requests
  community.general.ufw:
    rule: allow
    # from_ip: "{{ lan.subnet }}"  # <-- requesting device isn't yet part of the subnet
    to_port: 67:68
    proto: udp
    comment: DHCP
  become: true

- name: Accept tftp queries from {{ lan.subnet }} for network booting
  community.general.ufw:
    rule: allow
    from_ip: "{{ lan.subnet }}"
    to_port: tftp
    to_ip: "{{ lan0.ip}}"
    proto: udp
    comment: TFTP
  become: true

- name: Accept NTP requests from {{ lan.subnet }}
  community.general.ufw:
    rule: allow
    from_ip: "{{ lan.subnet }}"
    to_ip: "{{ lan0.ip }}"
    to_port: ntp
    proto: udp
    comment: NTP
  become: true

- name: Create resolved.conf directory if it does not exist
  ansible.builtin.file:
    path: /etc/systemd/resolved.conf.d
    state: directory
    mode: '0755'

- name: Stop systemd-resolved from binding to DNS port 53
  ansible.builtin.copy:
    content: |
      # Stop systemd-resolved from binding to DNS port 53
      [Resolve]
      DNSStubListener=no
    dest: /etc/systemd/resolved.conf.d/99-dnsmasq.conf
    mode: '0644'
    backup: no

# - name: Check value of default_ipv4.address
#   ansible.builtin.debug:
#     var: ansible_facts['default_ipv4']['address']

- name: Restart systemd-resolved if necessary to free up DNS port 53
  ansible.builtin.service:
    name: systemd-resolved.service
    enabled: yes
    state: restarted
  # Only restart if the lan subnet hasn't changed
  when: ansible_facts['default_ipv4']['address'] == lan0.ip

- name: Enable and start DNS, DHCP and TFTP servers
  ansible.builtin.service:
    name: dnsmasq.service
    enabled: yes
    state: started
  # Only start if the lan subnet hasn't changed
  when: ansible_facts['default_ipv4']['address'] == lan0.ip
