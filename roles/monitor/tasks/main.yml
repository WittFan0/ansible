- name: Set OS distribution dependent variables
  ansible.builtin.include_vars: "os_{{ ansible_facts['distribution'] }}.yml"

- name: Configure sending through gmail
  ansible.builtin.template:
    src: mailrc.j2
    dest: /root/.mailrc
    backup: true
    owner: root
    group: root
    mode: '0600'

- name: Install s-nail
  ansible.builtin.package:
    name: s-nail
    state: present
  tags:
    - packages
  environment: "{{proxy_env}}"

- name: Install nullmailer  # <-- logwatch depends on included sendmail
  ansible.builtin.package:
    name: nullmailer
    state: present
  tags:
    - packages
  environment: "{{proxy_env}}"

- name: Configure nullmailer admin address
  ansible.builtin.copy:
    content: "{{ vault_user_email }}"
    dest: /etc/nullmailer/adminaddr
    owner: "{{ nullmailer_owner }}"
    mode: '0644'
    backup: true
  notify: restart_nullmailer

- name: Configure nullmailer network domain name
  ansible.builtin.copy:
    content: "{{ lan.domain }}"
    dest: /etc/nullmailer/defaultdomain
    owner: "{{ nullmailer_owner }}"
    mode: '0644'
    backup: true
  notify: restart_nullmailer

- name: Configure mailname
  ansible.builtin.copy:
    content: "{{ hostname }}.{{ lan.domain }}"
    dest: /etc/mailname
    backup: true
  notify: restart_nullmailer

- name: Configure nullmailer remote server
  ansible.builtin.template:
    src: nullmailer-remotes.j2
    dest: /etc/nullmailer/remotes
    owner: "{{ nullmailer_owner }}"
    mode: '0600'
    backup: true
  notify: restart_nullmailer

- name: Copy nullmailer test script
  ansible.builtin.template:
    src: testnullmailer_sh.j2
    dest: /usr/local/sbin/testnullmailer.sh
    mode: '0755'

- name: Enable and start nullmailer
  ansible.builtin.service:
    name: nullmailer.service
    enabled: true
    state: started

- name: Install hardrive monitor
  ansible.builtin.package:
    name: smartmontools
    state: present
  tags:
    - packages
  environment: "{{proxy_env}}"

- name: Configure hardrive monitor
  ansible.builtin.template:
    src: smartd.j2
    dest: /etc/smartd.conf
    backup: true
    mode: '0644'
  notify:
    - restart_smartd

- name: Install sensors
  ansible.builtin.package:
    name: "{{ sensors_package }}"
    state: present
  tags:
    - packages
    
- name: Download sensors config file
  become: true
  ansible.builtin.get_url:
    url: "{{ sensors_conf_url }}"
    dest: '/etc/sensors.d/'
    mode: '0644'
    force: true
  tags:
    - packages
  when: sensors_conf_url is defined
  notify: restart_sensorsd
  environment: "{{proxy_env}}"

- name: Create sensors config file
  ansible.builtin.shell: |
    modprobe i2c_dev
    modprobe at24
    modprobe drivetemp
    sensors-detect --auto
  become: true
  when: sensors_conf_url is not defined
  notify: restart_sensorsd

- name: Enable and start sensors daemon
  ansible.builtin.service:
    name: "{{ sensors_service }}"
    enabled: true
    state: started
  when: ansible_facts['virtualization_role'] != "guest"

- name: Install log monitor
  ansible.builtin.package:
    name: logwatch
    state: present
  tags:
    - packages

- name: Configure log monitor
  ansible.builtin.template:
    src: logwatch_conf.j2
    dest: /etc/logwatch/conf/logwatch.conf
    backup: true
    mode: '0644'
  notify: restart_logwatch

- name: Configure smartd log monitoring
  ansible.builtin.copy:
    content: "LogFile = syslog"
    dest: /etc/logwatch/conf/services/smartd.conf
    mode: '0644'
  notify: restart_logwatch
  when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]

- name: Enable and start logwatch timer
  ansible.builtin.service:
    name: logwatch.timer
    enabled: true
    state: started
  when: ansible_facts['distribution'] == "Archlinux"

- name: Install reboot check cron job
  ansible.builtin.template:
    src: reboot-check.j2
    dest: /etc/cron.daily/reboot-check
    mode: '0755'
  when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]
