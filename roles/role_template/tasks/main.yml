---
# - name: Set OS distribution dependent variables
#   ansible.builtin.include_vars: "os_{{ ansible_facts['distribution'] }}.yml"

# - name: Install packages
#   become: true
#   ansible.builtin.package:
#     name: 
#       - package 
#     state: present
#   tags:
#     - packages
#   environment: "{{ proxy_env }}"

# - name: Install package (apt)
#   become: true
#   ansible.builtin.apt:
#     name: 
#       - 
#     state: present
#     cache_valid_time: 3600  # Only run "update_cache=yes" if the last one is more than 3600 seconds ago
#     # skip_pgp_check: yes # <-- Avoid extra step of having to load maintainer's key
#   tags:
#     - packages
#   when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]
#   environment: "{{ proxy_env }}"

# - name: Install package (pacman)
#   become: true
#   community.general.pacman:
#     name: 
#       -  
#     state: present
#   tags:
#     - packages
#   when: ansible_facts['distribution'] == "Archlinux"
#   environment: "{{ proxy_env }}"

# - name: Setup a user to build AUR packages
#   ansible.builtin.include_tasks: ../../common/tasks/aur.yml
#   when: ansible_facts['distribution'] == "Archlinux" and aur_ran is not defined

# - name: Install AUR pacakges
#   kewlfft.aur.aur:
#     name: 
#       - 
#     state: present
#   tags:
#     - aur
#     - packages
#   become: true
#   become_user: "{{ aur.builder }}"
#   when: ansible_facts['distribution'] == "Archlinux"

# - name: Configure 
#   ansible.builtin.template:
#     src: 
#     dest: /
#     backup: true
#   notify: 

# - name: Create file
#   ansible.builtin.copy:
#     src: 
#     dest: /
#     owner: "{{ remote_user.name }}"
#     group: "{{ remote_user.group }}"
#     backup: true
#   notify: 

# - name: Enable and start service
#   ansible.builtin.service:
#     name: .service
#     enabled: yes
#     state: started

# - ansible.builtin.include_tasks: .yml
#   when: ansible_facts['distribution'] == "DistroName"
