---
- name: Set OS distribution dependent variables
  ansible.builtin.include_vars: "os_{{ ansible_facts['distribution'] }}.yml"

- name: Remove existing network configuration
  ansible.builtin.file:
    state: "{{ item }}"
    path: "/etc/netplan/"
    owner: root
    group: root
    mode: '0755'
  with_items:  # <-- delete and recreate the directory
    - absent
    - directory

- name: Install netplan
  become: true
  ansible.builtin.package:
    name:
      - "{{ netplan_package }}"
    state: present
  tags:
    - packages
  environment: "{{ proxy_env }}"

- name: Create a netplan that assignes a static ip to {{ lan0.ifname }}
  become: true
  ansible.builtin.copy:
    dest: /etc/netplan/01-router.yaml
    content: |
      # Network router configuration
      network:
        version: 2
        renderer: networkd
        ethernets:
          {{ lan0.ifname }}:
            addresses:
            - {{ lan0.ip }}/24
            routes:
                - to: default
                  via: {{ lan.gateway }}
            nameservers:
              search: [{{ lan.domain }}]
              addresses:
              - 127.0.0.1
              # - 1.1.1.1
              # - 1.0.0.1
              # - 208.67.222.222
              # - 208.67.220.220
              # - 8.8.8.8
              # - 8.8.4.4
          {{ wan.ifname }}:
            dhcp4: true
            dhcp6: true
    owner: root
    group: root
    mode: '0640'
    backup: true
  when: wan.ifname is defined and wap.ifname is not defined
  notify:
    - Generate netplan

- name: Use the wireless nic as a wi-fi access point
  ansible.builtin.include_tasks: wap.yml
  when: wap.ifname is defined

- name: Install firewall
  ansible.builtin.package:
    name: ufw
    state: present
  tags:
    - packages
  when: wan.ifname is defined

- name: Allow packet forwarding
  become: true
  ansible.builtin.lineinfile:
    path: /etc/default/ufw
    regexp: '^DEFAULT_FORWARD_POLICY'
    line: DEFAULT_FORWARD_POLICY="ACCEPT"
    backup: true
  when: wan.ifname is defined

# /etc/ufw/sysctl.conf takes precedence over /etc/sysctl.conf
- name: Enable ipv4 forwarding
  become: true
  ansible.builtin.lineinfile:
    path: /etc/ufw/sysctl.conf
    regexp: '^net/ipv4/ip_forward'
    line: net/ipv4/ip_forward=1
    backup: true
  when: wan.ifname is defined

# - name: Enable ipv6 forwarding
#   become: true
#   ansible.builtin.lineinfile:
#     path: /etc/ufw/sysctl.conf
#     regexp: '^net/ipv6/conf/all/forwarding'
#     line: net/ipv6/conf/all/forwarding=1
#     backup: true

# - become: true
#   ansible.builtin.lineinfile:
#     path: /etc/ufw/sysctl.conf
#     regexp: '^net/ipv6/conf/default/forwarding'
#     line: net/ipv6/conf/default/forwarding=1
#     backup: true

# add rules that computers in Internal network can connect to external
# network or internet via router pc acting as a gateway
- name: Configure IP masquerading and forward necessary ports
  ansible.builtin.blockinfile:
    path: /etc/ufw/before.rules
    insertafter: "^\\*nat"
    block: |
      :PREROUTING ACCEPT [0:0]
      :POSTROUTING ACCEPT [0:0]

      # # Redirect all DNS requests to this machine  # <-- EXPERIMENTAL
      # -A PREROUTING -d {{ lan0.ip }} --dport 53 -j DNAT --to-destination {{ lan0.ip }}:53

      # # Xbox port forwardings  # <-- UFW won't start at boot with these enabled?
      # -A PREROUTING -i {{ wan.ifname }} --dport 53 -j DNAT --to-destination {{ router_xbox_ip }}:53
      # -A PREROUTING -i {{ wan.ifname }} --dport 3074 -j DNAT --to-destination {{ router_xbox_ip }}:3074
      # -A PREROUTING -i {{ wan.ifname }} -p udp --dport 4500 -j DNAT --to-destination {{ router_xbox_ip }}:4500
      # -A PREROUTING -i {{ wan.ifname }} -p udp --dport 3544 -j DNAT --to-destination {{ router_xbox_ip }}:3544
      # -A PREROUTING -i {{ wan.ifname }} -p udp --dport 500 -j DNAT --to-destination {{ router_xbox_ip }}:500
      # -A PREROUTING -i {{ wan.ifname }} -p udp --dport 88 -j DNAT --to-destination {{ router_xbox_ip }}:88
      # -A PREROUTING -i {{ wan.ifname }} -p tcp --dport 80 -j DNAT --to-destination {{ router_xbox_ip }}:80

      # Masquerade traffic exiting through {{ wan.ifname }} interface
      -A POSTROUTING -s {{ lan.base }}.0/24 -o {{ wan.ifname }} -j MASQUERADE
    append_newline: true
    prepend_newline: true
    backup: true
  when: wan.ifname is defined
