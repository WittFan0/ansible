---
- name: Set OS distribution dependent variables
  ansible.builtin.include_vars: "os_{{ ansible_facts['distribution'] }}.yml"

# TODO: Pass proxy IP and names as a host variable
- name: Add hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "192.168.40.8  dan.q.qw  dan"
    insertafter: 'EOF'
    mode: '0644'
    backup: true
  tags:
    - packages
  when: proxy_env is defined

- name: Enable pacman color
  ansible.builtin.lineinfile:
    path: /etc/pacman.conf
    regexp: '^Color'
    line: Color
    insertafter: '^\[options\]'
    backup: true
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Enable pacman parallel downloads
  ansible.builtin.lineinfile:
    path: /etc/pacman.conf
    regexp: '^ParallelDownloads'
    line: ParallelDownloads = 5
    insertafter: '^\[options\]'
    backup: true
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Enable pacman multilib
  ansible.builtin.blockinfile:
    path: /etc/pacman.conf
    block: |
      [multilib]
      Include = /etc/pacman.d/mirrorlist
    insertafter: 'EOF'
    backup: true
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Create pacman hook directory
  ansible.builtin.file:
    path: /etc/pacman.d/hooks
    owner: root
    mode: '0755'
    state: directory
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Get packages from proxy server (Arch)
  ansible.builtin.copy:
    content: Server = http://arch.mirror.constant.com/$repo/os/$arch
    dest: /etc/pacman.d/mirrorlist
    owner: root
    mode: '0644'
    backup: true
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Use proxy for retreiving apt packages (Debian)
  ansible.builtin.copy:
    content: |
      Acquire {
        HTTP::proxy "{{ proxy_env }}";
      }
    dest: /etc/apt/apt.conf.d/10proxy.conf
    owner: root
    mode: '0644'
    backup: true
  tags:
    - packages
  when: ansible_facts['distribution'] in ["Debian", "Ubuntu"] and proxy_env is defined

- name: Set unattended upgrades (Debian)
  ansible.builtin.copy:
    content: |
      Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}";
              "${distro_id}:${distro_codename}-security";
              "${distro_id}ESMApps:${distro_codename}-apps-security";
              "${distro_id}ESM:${distro_codename}-infra-security";
      };
      Unattended-Upgrade::DevRelease "auto";
      Unattended-Upgrade::Mail "{{ vault_user_email }}";
      Unattended-Upgrade::MailReport "on-change";
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    owner: root
    mode: '0640'
    backup: true
  tags:
    - packages
  when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]

- name: Set update notifier (Debian)
  ansible.builtin.copy:
    content: |
      DPkg::Post-Invoke {"if [ -d /var/lib/update-notifier ]; then touch /var/lib/update-notifier/dpkg-run-stamp; fi; /usr/lib/update-notifier/update-motd-updates-available 2>/dev/null || true";};
      APT::Update::Post-Invoke-Success {"/usr/lib/update-notifier/update-motd-updates-available 2>/dev/null || true";};
    dest: /etc/apt/apt.conf.d/99update-notifier
    owner: root
    mode: '0644'
    backup: true
  tags:
    - packages
  when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]

- name: Switch to cacheable http apt sources
  ansible.builtin.replace:
    path: /etc/apt/sources.list
    regexp: 'http?://([A-Za-z0-9]+(\.[A-Za-z0-9]+)+)/ubuntu/'
    replace: 'http://us.archive.ubuntu.com/ubuntu/'
    owner: root
    mode: '0644'
    backup: true
  tags:
    - packages
  when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]

# - name: Install reflector
#   community.general.pacman:
#     update_cache: true
#     name: reflector
#     state: present
#   tags:
#     - packages
#   when: ansible_facts['distribution'] == "Archlinux"

# - name: Update mirror list (Arch)
#   ansible.builtin.command: reflector --country US,Canada --completion-percent 90 --sort rate --latest 20 --protocol https --save /etc/pacman.d/mirrorlist
#   become: true
#   when: ansible_facts['distribution'] == "Archlinux"

# - name: Find fastest Ubuntu mirror
#   ansible.builtin.shell: curl -s http://mirrors.ubuntu.com/mirrors.txt | xargs -I {} sh -c 'echo $(curl -r 0-1024000 -s -w %{speed_download} -o /dev/null {}/ls-lR.gz) {}' | sort -g -r | head -1 | awk '{ print $2  }'
#   register: fastest_mirror
#   ignore_errors: true
#   when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]

# - name: Switch to fastest Ubuntu mirror
#   ansible.builtin.replace:
#     path: /etc/apt/sources.list
#     regexp: deb http://us.archive.ubuntu.com/ubuntu
#     replace: deb {{ fastest_mirror }}
#     backup: true
#   when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]

- name: Update package cache and upgrade (Arch)
  community.general.pacman:
    update_cache: true
    upgrade: true
  tags:
    - packages
  when: ansible_facts['distribution'] == "Archlinux"

- name: Update package cache and upgrade (Debian)
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600  # Only run "update_cache=yes" if the last one is more than 3600 seconds ago
    name: "*"
    state: latest
    autoclean: true
    autoremove: true
  tags:
    - packages
  when: ansible_facts['distribution'] in ["Debian", "Ubuntu"]

- name: Install distro base packages
  ansible.builtin.package:
    name: "{{ distro_packages }}"
    state: present
  tags:
    - packages

- name: Make sure cronie service unit is enabled
  ansible.builtin.systemd_service:
    enabled: true
    name: cronie
  when: ansible_facts['distribution'] == "Archlinux"

- name: Install base packages
  ansible.builtin.package:
    name: "{{ base_packages }}"
    state: present
  tags:
    - packages

