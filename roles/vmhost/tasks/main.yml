---
- name: Set OS distribution dependent variables
  ansible.builtin.include_vars: "os_{{ ansible_facts['distribution'] }}.yml"

- name: Install desktop environment
  ansible.builtin.include_tasks: ../../desktopenv/tasks/main.yml
  when: desktop_exists is not defined

- name: Create a directory for custom udev rules
  ansible.builtin.file:
    path: /etc/udev/rules.d/
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Read net.bridge sysctl rules whenever a bridge is created
  ansible.builtin.copy:
    content: |
      # From: https://wiki.libvirt.org/Net.bridge.bridge-nf-call_and_sysctl.conf.html
      ACTION=="add", SUBSYSTEM=="module", KERNEL=="br_netfilter", RUN+="/usr/lib/systemd/systemd-sysctl --prefix=net/bridge
    dest: /etc/udev/rules.d/99-bridge.rules
    owner: root
    group: root
    mode: '0644'
    backup: true

# This approach may not work with nftables?
#   see: https://wiki.archlinux.org/title/Talk:Nftables#c-8472-20231119133800-In0ni-2021-10-14T23:56:00.000Z
#        https://unix.stackexchange.com/a/657786
- name: Prevent packets traversing the libvirt bridge from being sent to iptables for processing
  ansible.builtin.copy:
    content: |
      # Taken from: https://wiki.libvirt.org/Net.bridge.bridge-nf-call_and_sysctl.conf.html
      net.bridge.bridge-nf-call-arptables = 0
      net.bridge.bridge-nf-call-ip6tables = 0
      net.bridge.bridge-nf-call-iptables = 0
    dest: /etc/sysctl.d/bridge.conf
    owner: root
    group: root
    mode: '0640'
    backup: true

- name: Provide systemd-resolved domain name resolution for libvirt
  become: true
  ansible.builtin.file:
    src: /run/systemd/resolve/stub-resolv.conf
    dest: /etc/resolv.conf
    state: link
    force: true

- name: Install virtualization packages
  become: true
  ansible.builtin.package:
    name: "{{ vmhost_packages }}"
    state: present
  tags:
    - packages
    - vmhost
  environment: "{{ proxy_env }}"

- name: Create kvm group
  become: true
  ansible.builtin.group:
    name: kvm
    state: present
  tags:
    - vmhost

- name: Add prime user to kvm group
  ansible.builtin.command: |
    usermod -a -G kvm {{ remote_user.name }}
  become: true

# The libvirt group is optional. It is not needed if the user is a member of the wheel group (arch) or sudo group (ubuntu)
- name: Create libvirt group
  become: true
  ansible.builtin.group:
    name: libvirt
    state: present
  tags:
    - vmhost

- name: Add prime user to libvirt group
  ansible.builtin.command: |
    usermod -a -G libvirt {{ remote_user.name }}
  become: true

- name: Create directory for libvirt images
  become: true
  ansible.builtin.file:
    path: /var/lib/libvirt/images
    state: directory
    group: kvm
    mode: '0770'

- name: Create directory for libvirt hooks
  become: true
  ansible.builtin.file:
    path: /etc/libvirt/hooks/qemu.d/
    state: directory
    mode: '0755'

- name: Enable power profiles
  ansible.builtin.service:
    name: power-profiles-daemon.service
    enabled: true
    state: started

- name: Download libvirt hook for running a command on startup or shutdown of a VM
  become: true
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/PassthroughPOST/VFIO-Tools/master/libvirt_hooks/qemu
    dest: /etc/libvirt/hooks/qemu
    mode: '0755'
    backup: true

- name: Create directory for libvirt VM startup hooks
  become: true
  ansible.builtin.file:
    path: /etc/libvirt/hooks/qemu.d/passthrough_gaming/prepare/begin/
    state: directory
    mode: '0755'

- name: Create scripts to run on startup of a VM
  become: true
  ansible.builtin.template:
    src: start_sh.j2
    dest: /etc/libvirt/hooks/qemu.d/passthrough_gaming/prepare/begin/start.sh
    mode: '0755'
  when: gpu_vid_nodedev is defined and gpu_aud_nodedev is defined

- name: Create directory for libvirt VM shutdown hooks
  become: true
  ansible.builtin.file:
    path: /etc/libvirt/hooks/qemu.d/passthrough_gaming/release/end/
    state: directory
    mode: '0755'

- name: Create scripts to run on shutdown of a VM
  become: true
  ansible.builtin.template:
    src: revert_sh.j2
    dest: /etc/libvirt/hooks/qemu.d/passthrough_gaming/release/end/revert.sh
    mode: '0755'
  when: gpu_vid_nodedev is defined and gpu_aud_nodedev is defined

- name: Enable and start libvirt
  become: true
  ansible.builtin.service:
    name: libvirtd.service
    enabled: true
    state: started

- name: Add libvirt plugin provider to Vagrant  # libvirtd.service must be running for this to work
  ansible.builtin.command: |
    vagrant plugin install vagrant-libvirt
  become: false

- name: Allow vagrant boxes to work with different providers  # libvirtd.service must be running for this to work
  ansible.builtin.command: |
    vagrant plugin install vagrant-mutate
  become: false

- name: Create script to view IOMMU groups
  become: true
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      shopt -s nullglob
      for g in $(find /sys/kernel/iommu_groups/* -maxdepth 0 -type d | sort -V); do
          echo "IOMMU Group ${g##*/}:"
          for d in $g/devices/*; do
              echo -e "\t$(lspci -nns ${d##*/})"
          done;
      done;
    dest: /usr/local/sbin/view_iommu.sh
    mode: '0755'

- name: Bind vfio-pci to GPU device ID
  become: true
  ansible.builtin.copy:
    content: |
      # Leave second GPU unbound so it can be passed through to a VM.
      # If modesetting the Nvidia driver, uncomment the vfio-pci option
      # below instead of passing arguments to the kernel. Kernel arguments
      # won't work because they are read too late to take effect.
      options vfio-pci ids={{ passthrough_gpu_pci_id }}

      # softdep option below is not needed since the vfio-pci module is built into the initramfs
      # softdep drm pre: vfio-pci

      # Nested Virtualization will allow some more performant features of sandboxing to work properly
      options kvm_amd nested=1
      options kvm_amd npt=1
      options kvm_intel nested=1

      # ignoring Model Specific Registers will prevent some hiccups that may occur on specific system calls
      options kvm ignore_msrs=1
    dest: /etc/modprobe-vfio.conf
    owner: root
    group: root
    mode: '0644'
  when: passthrough_gpu_pci_id is defined and ansible_facts['virtualization_role'] != "guest"

- name: Force vfio-pci to load before the graphics drivers have a chance to bind to the card (Arch)
  become: true
  ansible.builtin.copy:
    dest: /etc/mkinitcpio-vfio.conf
    content: |
      BINARIES=(btrfs)
      MODULES=(vfio_pci vfio vfio_iommu_type1)
      FILES="/etc/modprobe-vfio.conf"
      HOOKS=(base udev autodetect microcode modconf keyboard keymap block filesystems fsck grub-btrfs-overlayfs)
    owner: root
    group: root
    mode: '0644'
    backup: true
  notify:  # <-- Handlers are executed in the order they are defined in the handlers section, not in the order listed in the notify statement.
    - Reboot system
    - Recreate initial ramdisk
  when: passthrough_gpu_pci_id is defined and ansible_facts['distribution'] == "Archlinux" and ansible_facts['virtualization_role'] != "guest"

- name: Create initramfs preset for GPU passthrough (Arch)
  become: true
  ansible.builtin.copy:
    dest: /etc/mkinitcpio.d/linux-zen-vfio.preset
    content: |
      # mkinitcpio preset file for the 'linux-zen' package

      PRESETS=('vfio')

      vfio_kver="/boot/vmlinuz-linux-zen"
      vfio_microcode=(/boot/*-ucode.img)
      vfio_config="/etc/mkinitcpio-vfio.conf"
      vfio_image="/boot/initramfs-linux-zen-vfio.img"
    owner: root
    group: root
    mode: '0644'
    backup: true
  notify:  # <-- Handlers are executed in the order they are defined in the handlers section, not in the order listed in the notify statement.
    - Reboot system
    - Recreate initial ramdisk
  when: passthrough_gpu_pci_id is defined and ansible_facts['distribution'] == "Archlinux" and ansible_facts['virtualization_role'] != "guest"

- name: Create VFIO boot menu entry
  become: true
  ansible.builtin.template:
    src: arch_btrfs_21_linux_zen_vfio.j2
    dest: /etc/grub.d/21_linux_zen_vfio
    mode: '0755'
  notify:  # <-- Handlers are executed in the order they are defined in the handlers section, not in the order listed in the notify statement.
    - Reboot system
    - Reinstall grub
  when: passthrough_gpu_pci_id is defined and ansible_facts['distribution'] == "Archlinux" and ansible_facts['virtualization_role'] != "guest"

- name: Invoke lanbridge.yml
  ansible.builtin.include_tasks: lanbridge.yml

- name: Create custom qemu config allowing {{ remote_user.name }} to connect VM guests to br0
  become: true
  ansible.builtin.copy:
    content: "allow br0\n"
    dest: /etc/qemu/{{ remote_user.name }}.conf
    owner: root
    group: "{{ remote_user.group }}"
    mode: '0660'
    backup: true

- name: Source {{ remote_user.name }}'s qemu custom config
  become: true
  ansible.builtin.lineinfile:
    path: /etc/qemu/bridge.conf
    line: include /etc/qemu/{{ remote_user.name }}.conf
    backup: true
