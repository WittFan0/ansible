---
- name: Play for pushing ansible plays from server
  hosts: all
  become: true

  pre_tasks:
    - name: Classify hosts depending on their OS distribution
      ansible.builtin.group_by:
        key: os_{{ ansible_facts['distribution'] }}

- name: BTRFS roles
  hosts: btrfs
  become: true
  roles:
    - btrfs

- name: New build roles
  hosts: new_build
  become: true
  roles:
    - update
    - create_user
    - common
    - monitor
    - harden  # TODO: Limit to WAN interface

- name: Printing role
  hosts: printing
  become: true
  roles:
    - printing

- name: LAN controller roles
  hosts: lan_controller
  become: true
  roles:
    - geerlingguy.ntp
    - dnsmasq

- name: Proxy role
  hosts: proxy
  become: true
  roles:
    - proxy

- name: Media server roles
  hosts: media_server
  become: true
  roles:
    - geerlingguy.docker
    - mediasrv

- name: Collaboration server roles
  hosts: collab_server
  become: true
  roles:
    - geerlingguy.docker
    - collab

- name: Media manager role
  hosts: mediamgr
  become: true
  roles:
    - mediamgr

- name: Ripping role
  hosts: ripping
  become: true
  roles:
    - ripping

- name: Developer role
  hosts: development
  become: true
  roles:
    - development

- name: Gaming role
  hosts: gaming
  become: true
  roles:
    - gaming

- name: Virtual machine host role
  hosts: vmhost
  become: true
  roles:
    - vmhost

# # TODO: Move snapper to its own dedicated playbook.
# # Since it deletes the /.snapshot directory it should only ever be run one time.
# - name: Snapper role
#   hosts: btrfs
#   become: true
#   roles:
#     - snapper

- name: Router role
  hosts: router
  become: true
  roles:
    - router

- name: Post execution clean-up
  hosts: all
  become: true
  tasks:
    - name: Remove sudo-less pacman permission for aur_builder
      ansible.builtin.file:
        path: /etc/sudoers.d/11-install-aur_builder
        state: absent
      tags:
        - aur
        - packages
      when: ansible_facts['distribution'] == "Archlinux"

    - name: Remove aur_builder user
      ansible.builtin.user:
        name: "{{ aur.builder }}"
        state: absent
        remove: true
      when: ansible_facts['distribution'] == "Archlinux"

    - name: Install reflector
      community.general.pacman:
        update_cache: true
        name: reflector
        state: present
      tags:
        - packages
      when: ansible_facts['distribution'] == "Archlinux"

    - name: Update mirror list (Arch)
      ansible.builtin.command: reflector --country US,Canada --completion-percent 90 --sort rate --latest 20 --protocol https --save /etc/pacman.d/mirrorlist
      become: true
      when: ansible_facts['distribution'] == "Archlinux"

    - name: Open SSH port
      community.general.ufw:
        rule: limit
        to_port: "{{ ssh_port }}"
        proto: tcp
        comment: Rate limit OpenSSH server
      become: true
      # Only restart if the lan subnet hasn't changed
      when: ansible_facts['default_ipv4']['address'] == lan0.ip

    - name: Enable firewall
    #   ansible.builtin.command: ufw enable
      become: true
      community.general.ufw:
        state: enabled
      # Only restart if the lan subnet hasn't changed
      when: ansible_facts['default_ipv4']['address'] == lan0.ip

    - name: Generate and apply netplan configs
      become: true
      ansible.builtin.command: netplan generate && netplan apply
      # Only restart if the lan subnet hasn't changed
      when: ansible_facts['default_ipv4']['address'] == lan0.ip

    - name: Restart systemd-networkd
      ansible.builtin.systemd_service:
        name: systemd-networkd.service
        enabled: true
        state: restarted
        daemon_reload: true
      # Only restart if the lan subnet hasn't changed
      when: ansible_facts['default_ipv4']['address'] == lan0.ip

  # roles:
  #   - sshd-keyonly  # <-- Must come last because it disables root ssh
